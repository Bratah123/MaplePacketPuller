void __thiscall CWvsContext::OnInventoryOperation(CWvsContext *this, CInPacket *iPacket)
{
  CWvsContext *v2; // esi
  char *v3; // esi
  volatile LONG *v4; // edi
  int v5; // edi
  int j; // ebx
  GW_ItemSlotBase *v7; // esi
  TSecType<long> *v8; // esi
  int v9; // eax
  signed int v10; // edi
  signed int v11; // esi
  int v12; // eax
  char *v13; // eax
  int v14; // eax
  signed int k; // eax
  unsigned __int8 v16; // al
  int v17; // edi
  int v18; // edi
  int v19; // esi
  GW_ItemSlotBase *v20; // eax
  int v21; // eax
  ZMap<long,long,long>::_PAIR *v22; // edx
  int v23; // edi
  int v24; // eax
  CWvsContext *v25; // ebx
  int v26; // eax
  int v27; // eax
  GW_ItemSlotBase *v28; // esi
  TSecType<long> *v29; // esi
  int v30; // eax
  ZXString<char> *v31; // edi
  int v32; // eax
  BOOL v33; // eax
  StringPool *v34; // eax
  ZXString<char> *v35; // eax
  char *v36; // ecx
  const char *v37; // eax
  ZXString<char> *v38; // eax
  void *v39; // esi
  char *v40; // eax
  int v41; // eax
  ZXString<char> *v42; // esi
  StringPool *v43; // eax
  ZXString<char> *v44; // eax
  char *v45; // edx
  const char *v46; // eax
  ZXString<char> *v47; // eax
  char *v48; // esi
  char *v49; // esi
  void *v50; // esi
  char *v51; // ecx
  GW_ItemSlotBase *v52; // esi
  TSecType<long> *v53; // edi
  int v54; // eax
  ZMap<long,long,long>::_PAIR *v55; // edx
  int v56; // ebx
  int v57; // eax
  CWvsContext *v58; // esi
  int v59; // eax
  CUIBitsInventory *v60; // ecx
  int v61; // eax
  CharacterData *v62; // edi
  GW_ItemSlotEquip *v63; // edi
  int v64; // ebx
  unsigned int v65; // edi
  unsigned int v66; // eax
  int v67; // eax
  int *v68; // eax
  char *v69; // edi
  GW_ItemSlotEquip *v70; // ebx
  int v71; // ebx
  unsigned int v72; // edi
  unsigned int v73; // eax
  int v74; // eax
  int *v75; // eax
  char *v76; // edi
  TSecType<long> *v77; // edi
  int v78; // eax
  TSecType<long> *v79; // edi
  int v80; // eax
  CWvsContext *v81; // ebx
  int v82; // eax
  int v83; // eax
  int v84; // esi
  CharacterData *v85; // eax
  int v86; // eax
  char *v87; // ecx
  CWvsContext *v88; // esi
  GW_ItemSlotBase *v89; // edi
  TSecType<long> *v90; // ebx
  int v91; // eax
  ZMap<long,long,long>::_PAIR *v92; // edx
  int v93; // edi
  int v94; // eax
  int v95; // ebx
  int v96; // eax
  int v97; // eax
  CWvsContext *v98; // ebx
  __int64 v99; // kr00_8
  GW_ItemSlotBase *v100; // esi
  int v101; // eax
  CharacterData *v102; // ebx
  GW_ItemSlotEquip *v103; // edi
  int v104; // eax
  int v105; // edi
  int v106; // eax
  GW_ItemSlotBase *v107; // edi
  __POSITION *v108; // edx
  int v109; // esi
  int v110; // esi
  signed int v111; // eax
  unsigned __int16 v112; // ax
  int v113; // esi
  int v114; // eax
  int v115; // eax
  __POSITION *v116; // ebx
  int v117; // esi
  CWvsContext *v118; // edi
  int v119; // eax
  ZRef<GW_ItemSlotBase> *v120; // eax
  GW_ItemSlotBase *v121; // ebx
  TSecType<long> *v122; // ebx
  int v123; // eax
  signed int v124; // ecx
  int *v125; // edi
  int v126; // eax
  CharacterData *v127; // ebx
  int v128; // eax
  __int16 v129; // ax
  int v130; // ebx
  int v131; // edi
  int v132; // eax
  int v133; // eax
  signed int v134; // ecx
  int *v135; // edi
  int v136; // eax
  CharacterData *v137; // ebx
  int v138; // eax
  __POSITION *v139; // edi
  int v140; // esi
  CWvsContext *v141; // edi
  int v142; // edi
  int v143; // eax
  char *v144; // esi
  char v145; // al
  CWvsContext *v146; // edi
  int *v147; // ebx
  unsigned int l; // esi
  CWvsContext *v149; // ebx
  int *v150; // eax
  bool v151; // zf
  CUser *v152; // esi
  CharacterData *v153; // eax
  signed int v154; // ecx
  CharacterData *v155; // eax
  signed int v156; // ecx
  ZMap<long,long,long>::_PAIR **v157; // eax
  ZMap<long,long,long>::_PAIR **v158; // ecx
  __POSITION *v159; // eax
  __POSITION *v160; // ecx
  int v161; // esi
  int v162; // edi
  int v163; // ebx
  CWvsContext *v164; // esi
  int v165; // edx
  CWvsContext *v166; // ecx
  GW_ItemSlotEquip *v167; // ebx
  LONG (__stdcall *v168)(volatile LONG *); // edi
  int v169; // esi
  void *(__thiscall *v170)(ZRefCounted *, unsigned int); // eax
  StringPool *v171; // eax
  ZXString<char> *v172; // eax
  char *v173; // eax
  StringPool *v174; // eax
  ZXString<char> *v175; // eax
  StringPool *v176; // eax
  ZXString<char> *v177; // eax
  StringPool *v178; // eax
  ZXString<char> *v179; // eax
  char *v180; // esi
  StringPool *v181; // eax
  ZXString<char> *v182; // eax
  const char *v183; // eax
  ZXString<char> *v184; // eax
  void *v185; // edi
  char *v186; // edi
  void *v187; // esi
  int v188; // ecx
  CWvsContext *v189; // eax
  CWvsContext *v190; // edx
  int v191; // eax
  CUIItem *v192; // eax
  __POSITION **v193; // eax
  ZMap<long,long,long>::_PAIR **v194; // ecx
  signed int v195; // edi
  int v196; // eax
  int v197; // ebx
  int v198; // esi
  int v199; // eax
  ZRef<GW_ItemSlotBase> *v200; // esi
  volatile LONG *v201; // edi
  int v202; // ecx
  int v203; // edx
  bool v204; // zf
  bool v205; // sf
  _DWORD *v206; // eax
  CWvsContext *v207; // edx
  CWvsContext *v208; // eax
  ZRef<GW_ItemSlotBase> *v209; // esi
  CUIEventMuseumKingS2 *v210; // ecx
  int v211; // [esp-10h] [ebp-130h]
  ZArray<long> *v212; // [esp-Ch] [ebp-12Ch]
  ZRef<GW_ItemSlotBase> v213; // [esp-8h] [ebp-128h]
  ZXString<char> *v214; // [esp-4h] [ebp-124h]
  void (__thiscall *v215)(void *); // [esp+0h] [ebp-120h]
  int nCurItemID; // [esp+14h] [ebp-10Ch]
  CWvsContext *v217; // [esp+18h] [ebp-108h]
  int nTI; // [esp+1Ch] [ebp-104h]
  __POSITION *pos; // [esp+20h] [ebp-100h]
  CharacterData *cd; // [esp+24h] [ebp-FCh]
  int nBagMaxSlot; // [esp+28h] [ebp-F8h]
  int nNumber; // [esp+2Ch] [ebp-F4h]
  ZArray<long> aCheckQuestEquipID; // [esp+30h] [ebp-F0h]
  int nPos; // [esp+34h] [ebp-ECh]
  int nBeforeCount; // [esp+38h] [ebp-E8h]
  ZRef<GW_ItemSlotBase> v226; // [esp+3Ch] [ebp-E4h]
  ZRef<BagData> pBag; // [esp+44h] [ebp-DCh]
  char v228; // [esp+4Fh] [ebp-D1h]
  ZRef<GW_ItemSlotBase> pItem; // [esp+50h] [ebp-D0h]
  ZRef<GW_ItemSlotBase> pFromBagItem; // [esp+58h] [ebp-C8h]
  int bSetEffect; // [esp+60h] [ebp-C0h]
  ZRef<GW_ItemSlotBase> v232; // [esp+64h] [ebp-BCh]
  ZRef<GW_ItemSlotEquip> pEquip; // [esp+6Ch] [ebp-B4h]
  int nBeforePos; // [esp+74h] [ebp-ACh]
  int nCurCount; // [esp+78h] [ebp-A8h]
  ZXString<char> v236; // [esp+7Ch] [ebp-A4h]
  ZRef<GW_ItemSlotBase> pSwap; // [esp+80h] [ebp-A0h]
  ZArray<long> aChangeBagInfo[3]; // [esp+88h] [ebp-98h]
  ZXString<char> v239; // [esp+94h] [ebp-8Ch]
  ZXString<char> v240; // [esp+98h] [ebp-88h]
  int bNotRemoveAddInfo; // [esp+9Ch] [ebp-84h]
  ZMap<long,long,long> mOldItemCountInfo; // [esp+A0h] [ebp-80h]
  ZRef<GW_ItemSlotBase> pToBagItem; // [esp+B8h] [ebp-68h]
  ZRef<GW_ItemSlotBase> pBagItem; // [esp+C0h] [ebp-60h]
  ZMap<long,long,long> mInputItemInfo; // [esp+C8h] [ebp-58h]
  int i; // [esp+E0h] [ebp-40h]
  int nCount; // [esp+E4h] [ebp-3Ch]
  ZRef<GW_ItemSlotBase> v248; // [esp+E8h] [ebp-38h]
  ZRef<GW_ItemSlotBase> v249; // [esp+F0h] [ebp-30h]
  ZRef<GW_ItemSlotBase> v250; // [esp+F8h] [ebp-28h]
  ZRef<GW_ItemSlotBase> v251; // [esp+100h] [ebp-20h]
  ZRef<CharacterData> result; // [esp+108h] [ebp-18h]
  int v253; // [esp+11Ch] [ebp-4h]

  v2 = this;
  v217 = this;
  if ( CInPacket::Decode1(iPacket) )
    CWvsContext::SetExclRequestSent(v2, 0);
  cd = CWvsContext::GetCharacterData(v2, &result)->p;
  if ( result.p )
  {
    v3 = (char *)&result.p[-1].m_nBlockReason;
    v4 = &result.p[-1].m_nBlockDay;
    if ( !InterlockedDecrement(v4) )
    {
      InterlockedIncrement(v4);
      if ( v3 )
        (**(void (__thiscall ***)(char *, signed int))v3)(v3, 1);
    }
    result.p = 0;
  }
  nBeforeCount = 0;
  aCheckQuestEquipID.a = 0;
  v253 = 0;
  mOldItemCountInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
  mOldItemCountInfo._m_apTable = 0;
  mOldItemCountInfo._m_uTableSize = 31;
  mOldItemCountInfo._m_uCount = 0;
  mOldItemCountInfo._m_uAutoGrowEvery128 = 100;
  mOldItemCountInfo._m_uAutoGrowLimit = 24;
  LOBYTE(v253) = 1;
  v5 = 1;
  do
  {
    for ( j = 1; j <= CharacterData::GetItemSlotCount(cd, v5); ++j )
    {
      v7 = CharacterData::GetItem(cd, &pFromBagItem, v5, j)->p;
      if ( pFromBagItem.p )
      {
        if ( !InterlockedDecrement(&pFromBagItem.p->_m_nRef) )
        {
          InterlockedIncrement(&pFromBagItem.p->_m_nRef);
          if ( pFromBagItem.p )
            ((void (__stdcall *)(signed int))pFromBagItem.p->vfptr->__vecDelDtor)(1);
        }
        pFromBagItem.p = 0;
      }
      if ( v7 )
      {
        v8 = &v7->nItemID;
        v9 = TSecType<long>::GetData(v8);
        nPos = CWvsContext::GetItemCount(v217, v9, 1);
        bSetEffect = TSecType<long>::GetData(v8);
        ZMap<long,long,long>::Insert(&mOldItemCountInfo, &bSetEffect, &nPos);
      }
    }
    ++v5;
  }
  while ( v5 < 6 );
  mInputItemInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
  mInputItemInfo._m_apTable = 0;
  mInputItemInfo._m_uTableSize = 31;
  mInputItemInfo._m_uCount = 0;
  mInputItemInfo._m_uAutoGrowEvery128 = 100;
  mInputItemInfo._m_uAutoGrowLimit = 24;
  LOBYTE(v253) = 2;
  nBeforePos = 0;
  `eh vector constructor iterator'(
    aChangeBagInfo,
    4u,
    3,
    (void (__thiscall *)(void *))ZArray<long>::ZArray<long>,
    (void (__thiscall *)(void *))ZArray<long>::~ZArray<long>);
  LOBYTE(v253) = 3;
  v10 = 2;
  do
  {
    if ( v10 == 2 || v10 == 3 )
    {
      v11 = 2;
    }
    else if ( v10 == 4 )
    {
      v11 = 7;
    }
    else
    {
      v11 = 0;
    }
    v12 = *(_DWORD *)&pSwap.gap0[4 * v10];
    if ( v12 )
    {
      ZAllocEx<ZAllocAnonSelector>::Free(&ZAllocEx<ZAllocAnonSelector>::_s_alloc, (void *)(v12 - 4));
      *(_DWORD *)&pSwap.gap0[4 * v10] = 0;
    }
    if ( v11 )
    {
      v13 = (char *)ZAllocEx<ZAllocAnonSelector>::Alloc(&ZAllocEx<ZAllocAnonSelector>::_s_alloc, 4 * v11 + 4);
      v14 = (int)(v13 ? v13 + 4 : 0);
      *(_DWORD *)&pSwap.gap0[4 * v10] = v14;
      if ( v14 )
        *(_DWORD *)(v14 - 4) = v11;
    }
    for ( k = 0; k < v11; ++k )
      *(_DWORD *)(*(_DWORD *)&pSwap.gap0[4 * v10] + 4 * k) = 0;
    ++v10;
  }
  while ( v10 <= 4 );
  nPos = 0;
  v16 = CInPacket::Decode1(iPacket);
  v17 = v16;
  nCount = v16;
  bNotRemoveAddInfo = (unsigned __int8)CInPacket::Decode1(iPacket);
  bSetEffect = 0;
  i = v17;
  if ( v17 > 0 )
  {
    while ( 1 )
    {
      v18 = CInPacket::Decode1(iPacket);
      v19 = CInPacket::Decode1(iPacket);
      nCurItemID = (signed __int16)CInPacket::Decode2(iPacket);
      switch ( v18 )
      {
        case 0:
          GW_ItemSlotBase::Decode(&pItem, iPacket);
          v20 = pItem.p;
          LOBYTE(v253) = 4;
          if ( !pItem.p )
          {
            LOBYTE(v253) = 3;
            goto LABEL_341;
          }
          if ( nCurItemID > 0 )
          {
            pos = (__POSITION *)TSecType<long>::GetData(&pItem.p->nItemID);
            ZMap<long,long,long>::Insert(&mInputItemInfo, (const int *)&pos, &nCurItemID);
            v20 = pItem.p;
          }
          v21 = TSecType<long>::GetData(&v20->nItemID);
          if ( !mOldItemCountInfo._m_apTable )
            goto LABEL_49;
          v22 = mOldItemCountInfo._m_apTable[__ROR4__(v21, 5) % mOldItemCountInfo._m_uTableSize];
          if ( !v22 )
            goto LABEL_49;
          while ( v22->key != v21 )
          {
            v22 = v22->pNext;
            if ( !v22 )
              goto LABEL_49;
          }
          v23 = v22->value;
          if ( v22 != (ZMap<long,long,long>::_PAIR *)-12 )
            goto LABEL_50;
LABEL_49:
          v23 = 0;
LABEL_50:
          v215 = (void (__thiscall *)(void *))pItem.p;
          nNumber = (int)&v214;
          if ( pItem.p )
            InterlockedIncrement(&pItem.p->_m_nRef);
          CharacterData::SetItem(cd, v19, nCurItemID, *(ZRef<GW_ItemSlotBase> *)&v214);
          v24 = TSecType<long>::GetData(&pItem.p->nItemID);
          v25 = v217;
          CWvsContext::CheckQuestCompleteByItem(v217, v24, v23);
          v215 = (void (__thiscall *)(void *))1;
          v26 = TSecType<long>::GetData(&pItem.p->nItemID);
          CWvsContext::CheckInventoryOnAutoStartQuest(v25, v26, (int)v215);
          v27 = TSecType<long>::GetData(&pItem.p->nItemID);
          if ( !CItemInfo::GetEquipItem((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, v27) )
            goto LABEL_74;
          v28 = pItem.p;
          nBagMaxSlot = 0;
          LOBYTE(v253) = 5;
          if ( !pItem.p )
            goto LABEL_71;
          if ( GW_ItemSlotEquipBase::_ZtlSecureGet_nDurability((GW_ItemSlotEquipBase *)((char *)&pItem.p[1].dateExpire.dwLowDateTime
                                                                                      + 1)) )
          {
            if ( !((int (__thiscall *)(GW_ItemSlotBase *))v28->vfptr[69].__vecDelDtor)(v28) )
              goto LABEL_71;
            v41 = TSecType<long>::GetData(&v28->nItemID);
            v42 = CItemInfo::GetItemName((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, &v239, v41);
            v215 = (void (__thiscall *)(void *))10369;
            v214 = &v236;
            LOBYTE(v253) = 8;
            v43 = StringPool::GetInstance();
            v44 = StringPool::GetString(v43, v214, (unsigned int)v215);
            v45 = v42->_m_pStr;
            v46 = v44->_m_pStr;
            v215 = 0;
            v213 = (ZRef<GW_ItemSlotBase>)-1i64;
            LOBYTE(v253) = 9;
            v47 = ZXString<char>::Format((ZXString<char> *)&nBagMaxSlot, v46, v45);
            CHATLOG_ADD(v47, 0xBu, *(_QWORD *)&v213, (int)v215);
            LOBYTE(v253) = 8;
            if ( v236._m_pStr )
            {
              v48 = v236._m_pStr - 12;
              if ( InterlockedDecrement((volatile LONG *)v236._m_pStr - 3) <= 0 )
                ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v48);
            }
            v40 = v239._m_pStr;
          }
          else
          {
            v29 = &v28->nItemID;
            v30 = TSecType<long>::GetData(v29);
            v31 = CItemInfo::GetItemName((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, &v240, v30);
            LOBYTE(v253) = 6;
            v32 = TSecType<long>::GetData(v29) / 10000;
            v33 = v32 == 150 || v32 == 151;
            v215 = (void (__thiscall *)(void *))(v33 != 0 ? 8475 : 7809);
            v214 = (ZXString<char> *)&nCurCount;
            v34 = StringPool::GetInstance();
            v35 = StringPool::GetString(v34, v214, (unsigned int)v215);
            v36 = v31->_m_pStr;
            v37 = v35->_m_pStr;
            v215 = 0;
            v213 = (ZRef<GW_ItemSlotBase>)-1i64;
            LOBYTE(v253) = 7;
            v38 = ZXString<char>::Format((ZXString<char> *)&nBagMaxSlot, v37, v36);
            CHATLOG_ADD(v38, 0xBu, *(_QWORD *)&v213, (int)v215);
            LOBYTE(v253) = 6;
            if ( nCurCount )
            {
              v39 = (void *)(nCurCount - 12);
              if ( InterlockedDecrement((volatile LONG *)(nCurCount - 12)) <= 0 )
                ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v39);
            }
            v40 = v240._m_pStr;
          }
          LOBYTE(v253) = 5;
          if ( v40 )
          {
            v49 = v40 - 12;
            if ( InterlockedDecrement((volatile LONG *)v40 - 3) <= 0 )
              ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v49);
          }
LABEL_71:
          LOBYTE(v253) = 4;
          if ( nBagMaxSlot )
          {
            v50 = (void *)(nBagMaxSlot - 12);
            if ( InterlockedDecrement((volatile LONG *)(nBagMaxSlot - 12)) <= 0 )
              ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v50);
          }
LABEL_74:
          if ( TSingleton<CUIBitsInventory>::ms_pInstance )
            ((void (__stdcall *)(int))v25->m_pUIBitsInven.p->vfptr[31].Update)(nCurItemID);
          if ( TSingleton<CUniqueModeless>::ms_pInstance._m_pStr
            && (*(int (__stdcall **)(CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 1) + 124))(&CUIAuctionDlg::ms_RTTI_CUIAuctionDlg)
            && TSingleton<CUniqueModeless>::ms_pInstance._m_pStr )
          {
            if ( (*(int (__stdcall **)(CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 1) + 124))(&CUIAuctionDlg::ms_RTTI_CUIAuctionDlg) )
              v51 = TSingleton<CUniqueModeless>::ms_pInstance._m_pStr;
            else
              v51 = 0;
            CUIAuctionDlg::OnRefresh((CUIAuctionDlg *)v51);
          }
          LOBYTE(v253) = 3;
          if ( pItem.p )
          {
            if ( !InterlockedDecrement(&pItem.p->_m_nRef) )
            {
              InterlockedIncrement(&pItem.p->_m_nRef);
              if ( pItem.p )
                ((void (__stdcall *)(signed int))pItem.p->vfptr->__vecDelDtor)(1);
            }
            pItem.p = 0;
          }
          goto LABEL_341;
        case 1:
          nBagMaxSlot = (signed __int16)CInPacket::Decode2(iPacket);
          v52 = CharacterData::GetItem(cd, &v250, v19, nCurItemID)->p;
          if ( v250.p )
          {
            if ( !InterlockedDecrement(&v250.p->_m_nRef) )
            {
              InterlockedIncrement(&v250.p->_m_nRef);
              if ( v250.p )
                ((void (__stdcall *)(signed int))v250.p->vfptr->__vecDelDtor)(1);
            }
            v250.p = 0;
          }
          if ( !v52 )
            goto LABEL_341;
          if ( nCurItemID > 0 )
          {
            pos = (__POSITION *)TSecType<long>::GetData(&v52->nItemID);
            ZMap<long,long,long>::Insert(&mInputItemInfo, (const int *)&pos, &nCurItemID);
          }
          v53 = &v52->nItemID;
          v54 = TSecType<long>::GetData(&v52->nItemID);
          if ( !mOldItemCountInfo._m_apTable )
            goto LABEL_102;
          v55 = mOldItemCountInfo._m_apTable[__ROR4__(v54, 5) % mOldItemCountInfo._m_uTableSize];
          if ( !v55 )
            goto LABEL_102;
          while ( v55->key != v54 )
          {
            v55 = v55->pNext;
            if ( !v55 )
              goto LABEL_102;
          }
          v56 = v55->value;
          if ( v55 == (ZMap<long,long,long>::_PAIR *)-12 )
LABEL_102:
            v56 = 0;
          v52->vfptr[22].__vecDelDtor((ZRefCounted *)&v52->vfptr, nBagMaxSlot);
          v215 = (void (__thiscall *)(void *))1;
          v57 = TSecType<long>::GetData(&v52->nItemID);
          v58 = v217;
          CWvsContext::CheckInventoryOnAutoStartQuest(v217, v57, (int)v215);
          v59 = TSecType<long>::GetData(v53);
          CWvsContext::CheckQuestCompleteByItem(v58, v59, v56);
          if ( !TSingleton<CUIBitsInventory>::ms_pInstance )
            goto LABEL_106;
          v60 = v58->m_pUIBitsInven.p;
          goto LABEL_105;
        case 2:
          v61 = (signed __int16)CInPacket::Decode2(iPacket);
          nTI = (signed __int16)v61;
          if ( v19 == 1 && (nCurItemID < 0 || v61 < 0) )
            nBeforeCount = 1;
          v62 = cd;
          CharacterData::GetItem(cd, (ZRef<GW_ItemSlotBase> *)&pBag, v19, v61);
          CharacterData::GetItem(v62, &pSwap, v19, nCurItemID);
          v63 = (GW_ItemSlotEquip *)pBag.p;
          LOBYTE(v253) = 11;
          if ( !pBag.p )
            goto LABEL_127;
          v64 = TSecType<long>::GetData((TSecType<long> *)&pBag.p->aItemsInBag[1]);
          if ( !aCheckQuestEquipID.a )
          {
            v65 = 0;
            v66 = 1;
LABEL_125:
            ZArray<long>::_Reserve(&aCheckQuestEquipID, v66, (ZAllocHelper *)&v228);
            goto LABEL_126;
          }
          v65 = *(aCheckQuestEquipID.a - 1);
          v67 = *(aCheckQuestEquipID.a - 2);
          if ( v67 < 0 )
            v67 = ~v67;
          if ( (unsigned int)(v67 - 4) >> 2 <= v65 )
          {
            if ( v65 )
              v66 = 2 * v65;
            else
              v66 = 1;
            goto LABEL_125;
          }
LABEL_126:
          v68 = aCheckQuestEquipID.a;
          ++*(v68 - 1);
          v69 = (char *)&v68[v65];
          memmove(v69 + 4, v69, 0);
          *(_DWORD *)v69 = v64;
          v63 = (GW_ItemSlotEquip *)pBag.p;
LABEL_127:
          v70 = (GW_ItemSlotEquip *)pSwap.p;
          if ( !pSwap.p )
            goto LABEL_138;
          v71 = TSecType<long>::GetData(&pSwap.p->nItemID);
          if ( aCheckQuestEquipID.a )
          {
            v72 = *(aCheckQuestEquipID.a - 1);
            v74 = *(aCheckQuestEquipID.a - 2);
            if ( v74 < 0 )
              v74 = ~v74;
            if ( (unsigned int)(v74 - 4) >> 2 > v72 )
              goto LABEL_137;
            if ( v72 )
              v73 = 2 * v72;
            else
              v73 = 1;
          }
          else
          {
            v72 = 0;
            v73 = 1;
          }
          ZArray<long>::_Reserve(&aCheckQuestEquipID, v73, (ZAllocHelper *)&v228);
LABEL_137:
          v75 = aCheckQuestEquipID.a;
          ++*(v75 - 1);
          v76 = (char *)&v75[v72];
          memmove(v76 + 4, v76, 0);
          *(_DWORD *)v76 = v71;
          v70 = (GW_ItemSlotEquip *)pSwap.p;
          v63 = (GW_ItemSlotEquip *)pBag.p;
LABEL_138:
          if ( nCurItemID > 0 || nTI > 0 )
          {
            if ( v63
              && (v77 = (TSecType<long> *)&pBag.p->aItemsInBag[1],
                  v78 = TSecType<long>::GetData((TSecType<long> *)&pBag.p->aItemsInBag[1]),
                  v78 == v217->m_nLastestGetItemID)
              && nTI == v217->m_nLastestGetItemPos )
            {
              pos = (__POSITION *)TSecType<long>::GetData(v77);
              ZMap<long,long,long>::Insert(&mInputItemInfo, (const int *)&pos, &nCurItemID);
              nBeforePos = v217->m_nLastestGetItemPos;
            }
            else
            {
              if ( v70 )
              {
                v79 = &pSwap.p->nItemID;
                v80 = TSecType<long>::GetData(&pSwap.p->nItemID);
                v81 = v217;
                if ( v80 == v217->m_nLastestGetItemID && nCurItemID == v217->m_nLastestGetItemPos )
                {
                  pos = (__POSITION *)TSecType<long>::GetData(v79);
                  ZMap<long,long,long>::Insert(&mInputItemInfo, (const int *)&pos, &nTI);
                  nBeforePos = v81->m_nLastestGetItemPos;
                }
              }
              v70 = (GW_ItemSlotEquip *)pSwap.p;
            }
            v63 = (GW_ItemSlotEquip *)pBag.p;
          }
          nNumber = (int)&v214;
          v215 = (void (__thiscall *)(void *))v63;
          if ( v63 )
            InterlockedIncrement(&v63->_m_nRef);
          CharacterData::SetItem(cd, v19, nCurItemID, *(ZRef<GW_ItemSlotBase> *)&v214);
          nNumber = (int)&v214;
          v215 = (void (__thiscall *)(void *))v70;
          if ( v70 )
            InterlockedIncrement(&v70->_m_nRef);
          CharacterData::SetItem(cd, v19, nTI, *(ZRef<GW_ItemSlotBase> *)&v214);
          if ( v63 )
          {
            v215 = (void (__thiscall *)(void *))1;
            v82 = TSecType<long>::GetData(&v63->nItemID);
            CWvsContext::CheckInventoryOnAutoStartQuest(v217, v82, (int)v215);
          }
          if ( v70 )
          {
            v215 = (void (__thiscall *)(void *))1;
            v83 = TSecType<long>::GetData(&v70->nItemID);
            CWvsContext::CheckInventoryOnAutoStartQuest(v217, v83, (int)v215);
          }
          v84 = nCurItemID;
          if ( nTI < 0 || nCurItemID < 0 )
            bSetEffect = 1;
          if ( TSingleton<CUIBitsInventory>::ms_pInstance )
          {
            ((void (__stdcall *)(int))v217->m_pUIBitsInven.p->vfptr[31].Update)(nCurItemID);
            ((void (__stdcall *)(int))v217->m_pUIBitsInven.p->vfptr[31].Update)(nTI);
          }
          if ( v84 == -10 || nTI == -10 )
          {
            v85 = v217->m_pCharacterData.p;
            if ( v85 )
            {
              v215 = (void (__thiscall *)(void *))v85->characterStat._ZtlSecureTear_nJob_CS;
              v86 = _ZtlSecureFuse<short>(v85->characterStat._ZtlSecureTear_nJob, (unsigned int)v215);
              if ( (signed __int16)v86 == 120 || v86 == 121 || v86 == 122 )
              {
                if ( TSingleton<CUserLocal>::ms_pInstance._m_pStr )
                {
                  nNumber = (int)&v214;
                  CUserLocal::UpdatePassiveSkillData(
                    (CUserLocal *)TSingleton<CUserLocal>::ms_pInstance._m_pStr,
                    0,
                    0,
                    0,
                    (ZRef<PassiveSkillData>)(unsigned int)v214);
                }
              }
            }
          }
          if ( TSingleton<CUniqueModeless>::ms_pInstance._m_pStr
            && (*(int (__thiscall **)(char *, CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 1)
                                                      + 124))(
                 TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 4,
                 &CUIAuctionDlg::ms_RTTI_CUIAuctionDlg)
            && TSingleton<CUniqueModeless>::ms_pInstance._m_pStr )
          {
            if ( (*(int (__thiscall **)(char *, CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr
                                                          + 1)
                                                        + 124))(
                   TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 4,
                   &CUIAuctionDlg::ms_RTTI_CUIAuctionDlg) )
            {
              v87 = TSingleton<CUniqueModeless>::ms_pInstance._m_pStr;
            }
            else
            {
              v87 = 0;
            }
            CUIAuctionDlg::OnRefresh((CUIAuctionDlg *)v87);
          }
          if ( nBeforeCount )
          {
            v88 = v217;
            CWvsContext::NoticeEquipmentSkill(v217, v70, nTI < 0);
            if ( v63 )
              CWvsContext::NoticeEquipmentSkill(v88, v63, 0);
          }
          LOBYTE(v253) = 10;
          if ( v70 )
          {
            if ( !InterlockedDecrement(&v70->_m_nRef) )
            {
              InterlockedIncrement(&v70->_m_nRef);
              v70->vfptr->__vecDelDtor((ZRefCounted *)&v70->vfptr, 1u);
            }
            pSwap.p = 0;
          }
          LOBYTE(v253) = 3;
          if ( v63 )
          {
            if ( !InterlockedDecrement(&v63->_m_nRef) )
            {
              InterlockedIncrement(&v63->_m_nRef);
              v63->vfptr->__vecDelDtor((ZRefCounted *)&v63->vfptr, 1u);
            }
            pBag.p = 0;
          }
LABEL_341:
          if ( --i <= 0 )
          {
            if ( nBeforeCount )
            {
              v144 = TSingleton<CUserLocal>::ms_pInstance._m_pStr;
              if ( TSingleton<CUserLocal>::ms_pInstance._m_pStr )
              {
                v145 = CInPacket::Decode1(iPacket);
                CUserLocal::SetSecondaryStatChangedPoint((CUserLocal *)v144, v145);
              }
              v146 = v217;
              v147 = aCheckQuestEquipID.a;
              for ( l = 0; v147 && l < *(v147 - 1); ++l )
                CWvsContext::CheckEquipOnAutoStartQuest(v146, v147[l], 1);
              CWvsContext::UpdateAutoQuestAlertIcon(v146);
            }
            v17 = nCount;
            goto LABEL_352;
          }
          break;
        case 3:
          nBagMaxSlot = (int)TSingleton<CUserLocal>::ms_pInstance._m_pStr;
          v89 = CharacterData::GetItem(cd, &v248, v19, nCurItemID)->p;
          if ( v248.p )
          {
            if ( !InterlockedDecrement(&v248.p->_m_nRef) )
            {
              InterlockedIncrement(&v248.p->_m_nRef);
              if ( v248.p )
                ((void (__stdcall *)(signed int))v248.p->vfptr->__vecDelDtor)(1);
            }
            v248.p = 0;
          }
          if ( !v89 )
            goto LABEL_341;
          v90 = &v89->nItemID;
          pos = (__POSITION *)&v89->nItemID;
          v91 = TSecType<long>::GetData(&v89->nItemID);
          if ( !mOldItemCountInfo._m_apTable )
            goto LABEL_201;
          v92 = mOldItemCountInfo._m_apTable[__ROR4__(v91, 5) % mOldItemCountInfo._m_uTableSize];
          if ( !v92 )
            goto LABEL_201;
          while ( v92->key != v91 )
          {
            v92 = v92->pNext;
            if ( !v92 )
              goto LABEL_201;
          }
          nTI = v92->value;
          if ( v92 != (ZMap<long,long,long>::_PAIR *)-12 )
            goto LABEL_202;
LABEL_201:
          nTI = 0;
LABEL_202:
          v93 = TSecType<long>::GetData(v90);
          if ( nCurItemID > 0 )
          {
            nNumber = TSecType<long>::GetData(v90);
            ZMap<long,long,long>::Insert(&mInputItemInfo, &nNumber, &nCurItemID);
          }
          if ( !nBagMaxSlot )
            goto LABEL_501;
          v94 = *(_DWORD *)(nBagMaxSlot + 56524);
          if ( *(_DWORD *)(nBagMaxSlot + 56528) + __ROR4__(v94 ^ 0xBAADF00D, 5) != *(_DWORD *)(nBagMaxSlot + 56532) )
          {
            *(_DWORD *)pEquip.gap0 = 5;
            _CxxThrowException(&pEquip, &_TI1_AVZException__);
          }
          if ( v94 ^ __ROL4__(*(_DWORD *)(nBagMaxSlot + 56528), 5)
            && (v95 = TSecType<long>::GetData((TSecType<long> *)pos),
                (*(int (__thiscall **)(int))(*(_DWORD *)(nBagMaxSlot + 176) + 20))(nBagMaxSlot + 176) == v95) )
          {
            v96 = TSecType<long>::GetData((TSecType<long> *)pos);
            v97 = CharacterData::GetItemCount(cd, v19, v96, 1, 1);
            v98 = v217;
            if ( v97 == 1 )
              CWvsContext::SendGetUpFromChairRequest(v217, 0);
          }
          else
          {
LABEL_501:
            v98 = v217;
          }
          if ( v19 == 1 && nCurItemID < 0 )
            nBeforeCount = 1;
          *ZArray<long>::InsertBefore(&aCheckQuestEquipID, -1) = v93;
          if ( v93 / 10000 == 223 && !bNotRemoveAddInfo )
            CharacterData::ResetExpConsumeItem(cd, v93);
          nNumber = (int)&v214;
          CharacterData::SetItem(cd, v19, nCurItemID, (ZRef<GW_ItemSlotBase>)(unsigned int)v214);
          CWvsContext::CheckInventoryOnAutoStartQuest(v98, v93, 1);
          CWvsContext::CheckQuestCompleteByItem(v98, v93, nTI);
          CWvsContext::CheckPieceItem(v98, v93, 1);
          if ( TSingleton<CUIBitsInventory>::ms_pInstance )
          {
            v60 = v98->m_pUIBitsInven.p;
LABEL_105:
            ((void (__stdcall *)(int))v60->vfptr[31].Update)(nCurItemID);
          }
LABEL_106:
          if ( TSingleton<CUniqueModeless>::ms_pInstance._m_pStr
            && (*(int (__stdcall **)(CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 1) + 124))(&CUIAuctionDlg::ms_RTTI_CUIAuctionDlg)
            && TSingleton<CUniqueModeless>::ms_pInstance._m_pStr )
          {
            if ( (*(int (__stdcall **)(CRTTI *))(*((_DWORD *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr + 1) + 124))(&CUIAuctionDlg::ms_RTTI_CUIAuctionDlg) )
              CUIAuctionDlg::OnRefresh((CUIAuctionDlg *)TSingleton<CUniqueModeless>::ms_pInstance._m_pStr);
            else
              CUIAuctionDlg::OnRefresh(0);
          }
          goto LABEL_341;
        case 4:
          v99 = CInPacket::Decode8(iPacket);
          CharacterData::GetItem(cd, &v251, v19, nCurItemID);
          v100 = v251.p;
          LOBYTE(v253) = 12;
          if ( v251.p )
          {
            ((void (__thiscall *)(GW_ItemSlotBase *, _DWORD, _DWORD))v251.p->vfptr[48].__vecDelDtor)(
              v251.p,
              v99,
              HIDWORD(v99));
            LOBYTE(v253) = 3;
            if ( !InterlockedDecrement(&v100->_m_nRef) )
            {
              InterlockedIncrement(&v100->_m_nRef);
              v100->vfptr->__vecDelDtor((ZRefCounted *)&v100->vfptr, 1u);
            }
            v251.p = 0;
          }
          else
          {
            LOBYTE(v253) = 3;
          }
          goto LABEL_341;
        case 5:
          v101 = CInPacket::Decode4(iPacket);
          v102 = cd;
          nNumber = v101;
          CharacterData::GetItemInBag(cd, &pBagItem, v101, v19);
          CharacterData::GetItem(v102, (ZRef<GW_ItemSlotBase> *)&pEquip, v19, nCurItemID);
          v103 = pEquip.p;
          LOBYTE(v253) = 14;
          if ( pEquip.p )
          {
            v104 = TSecType<long>::GetData(&pEquip.p->nItemID);
            if ( v217->m_nLastestGetItemID == v104 && v217->m_nLastestGetItemPos == nCurItemID )
              nPos = 1;
          }
          v215 = (void (__thiscall *)(void *))pBagItem.p;
          pos = (__POSITION *)&v214;
          if ( pBagItem.p )
            InterlockedIncrement(&pBagItem.p->_m_nRef);
          CharacterData::SetItem(v102, v19, nCurItemID, *(ZRef<GW_ItemSlotBase> *)&v214);
          v215 = (void (__thiscall *)(void *))v19;
          pos = (__POSITION *)&v213;
          v214 = (ZXString<char> *)v103;
          if ( v103 )
            InterlockedIncrement(&v103->_m_nRef);
          CharacterData::SetItemInBag(v102, nNumber, v213, (int)v215);
          LOBYTE(v253) = 13;
          if ( v103 )
          {
            if ( !InterlockedDecrement(&v103->_m_nRef) )
            {
              InterlockedIncrement(&v103->_m_nRef);
              v103->vfptr->__vecDelDtor((ZRefCounted *)&v103->vfptr, 1u);
            }
            pEquip.p = 0;
          }
          LOBYTE(v253) = 3;
          if ( pBagItem.p )
          {
            if ( !InterlockedDecrement(&pBagItem.p->_m_nRef) )
            {
              InterlockedIncrement(&pBagItem.p->_m_nRef);
              if ( pBagItem.p )
                ((void (__stdcall *)(signed int))pBagItem.p->vfptr->__vecDelDtor)(1);
            }
            pBagItem.p = 0;
          }
          goto LABEL_341;
        case 6:
          nBagMaxSlot = v19 - 2;
          if ( (unsigned int)(v19 - 2) > 2 )
            goto LABEL_341;
          v105 = nCurItemID;
          if ( nCurItemID < 101 )
            goto LABEL_341;
          if ( v19 == 2 || v19 == 3 )
            v106 = 212;
          else
            v106 = v19 == 4 ? 712 : 100;
          if ( nCurItemID > v106 )
            goto LABEL_341;
          nNumber = (signed __int16)CInPacket::Decode2(iPacket);
          v107 = CharacterData::GetItemInBag(cd, &v249, v105, v19)->p;
          if ( v249.p )
          {
            if ( !InterlockedDecrement(&v249.p->_m_nRef) )
            {
              InterlockedIncrement(&v249.p->_m_nRef);
              if ( v249.p )
                ((void (__stdcall *)(signed int))v249.p->vfptr->__vecDelDtor)(1);
            }
            v249.p = 0;
          }
          if ( !v107 )
            goto LABEL_341;
          nTI = TSecType<long>::GetData(&v107->nItemID);
          v108 = (__POSITION *)(nCurItemID / 100 - 1);
          pos = v108;
          if ( (signed int)v108 < 0 )
            goto LABEL_341;
          v109 = v19 - 2;
          if ( v109 && (v110 = v109 - 1) != 0 )
            v111 = v110 == 1 ? 7 : 0;
          else
            v111 = 2;
          if ( (signed int)v108 >= v111 )
            goto LABEL_341;
          v215 = (void (__thiscall *)(void *))v107[1]._m_nRef;
          v112 = _ZtlSecureFuse<unsigned short>((const unsigned __int16 *)&v107[1], (unsigned int)v215);
          v113 = nNumber;
          aChangeBagInfo[nBagMaxSlot].a[(_DWORD)pos] += nNumber - v112;
          pos = 0;
          nNumber = TSecType<long>::GetData(&v107->nItemID);
          ZMap<long,long,long>::GetAt(&mOldItemCountInfo, &nNumber, (int *)&pos);
          v114 = TSecType<long>::GetData(&v107->nItemID);
          v115 = CItemInfo::GetItemCountInBag((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, cd, v114, 1, 1);
          v116 = &pos[v115];
          v107->vfptr[22].__vecDelDtor((ZRefCounted *)&v107->vfptr, v113);
          v117 = nTI;
          v215 = (void (__thiscall *)(void *))v116;
          goto LABEL_265;
        case 7:
          if ( (unsigned int)(v19 - 2) <= 2 && nCurItemID >= 101 )
          {
            if ( v19 == 2 || v19 == 3 )
              v119 = 212;
            else
              v119 = v19 == 4 ? 712 : 100;
            if ( nCurItemID <= v119 )
            {
              v120 = CharacterData::GetItemInBag(cd, &v232, nCurItemID, v19);
              v121 = v120->p;
              pos = (__POSITION *)v120->p;
              if ( v232.p )
              {
                if ( !InterlockedDecrement(&v232.p->_m_nRef) )
                {
                  InterlockedIncrement(&v232.p->_m_nRef);
                  if ( v232.p )
                    ((void (__stdcall *)(signed int))v232.p->vfptr->__vecDelDtor)(1);
                }
                v232.p = 0;
              }
              if ( v121 )
              {
                v122 = (TSecType<long> *)&pos[12];
                nBagMaxSlot = TSecType<long>::GetData((TSecType<long> *)&pos[12]);
                v123 = nCurItemID / 100 - 1;
                if ( v123 >= 0 )
                {
                  if ( v19 == 2 || v19 == 3 )
                    v124 = 2;
                  else
                    v124 = v19 == 4 ? 7 : 0;
                  if ( v123 < v124 )
                  {
                    v125 = &aChangeBagInfo[v19 - 2].a[v123];
                    v215 = *(void (__thiscall **)(void *))&pos[48];
                    *v125 -= _ZtlSecureFuse<unsigned short>((const unsigned __int16 *)&pos[44], (unsigned int)v215);
                    nTI = 0;
                    nNumber = TSecType<long>::GetData(v122);
                    ZMap<long,long,long>::GetAt(&mOldItemCountInfo, &nNumber, &nTI);
                    v126 = TSecType<long>::GetData(v122);
                    v127 = cd;
                    v128 = CItemInfo::GetItemCountInBag(
                             (CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data,
                             cd,
                             v126,
                             1,
                             1);
                    nTI += v128;
                    nNumber = (int)&v213;
                    CharacterData::SetItemInBag(
                      v127,
                      nCurItemID,
                      (ZRef<GW_ItemSlotBase>)*(unsigned int *)v213.gap0,
                      v19);
                    v117 = nBagMaxSlot;
                    v215 = (void (__thiscall *)(void *))nTI;
LABEL_265:
                    v118 = v217;
                    CWvsContext::CheckQuestCompleteByItem(v217, v117, (int)v215);
                    CWvsContext::CheckInventoryOnAutoStartQuest(v118, v117, 1);
                  }
                }
              }
            }
          }
          goto LABEL_341;
        case 8:
          v129 = CInPacket::Decode2(iPacket);
          v130 = nCurItemID;
          v131 = v129;
          CharacterData::GetItemInBag(cd, &pFromBagItem, nCurItemID, v19);
          LOBYTE(v253) = 15;
          CharacterData::GetItemInBag(cd, &pToBagItem, v131, v19);
          v215 = (void (__thiscall *)(void *))v19;
          v214 = (ZXString<char> *)pToBagItem.p;
          LOBYTE(v253) = 16;
          nNumber = (int)&v213;
          if ( pToBagItem.p )
            InterlockedIncrement(&pToBagItem.p->_m_nRef);
          CharacterData::SetItemInBag(cd, v130, v213, (int)v215);
          v215 = (void (__thiscall *)(void *))v19;
          v214 = (ZXString<char> *)pFromBagItem.p;
          nNumber = (int)&v213;
          if ( pFromBagItem.p )
            InterlockedIncrement(&pFromBagItem.p->_m_nRef);
          CharacterData::SetItemInBag(cd, v131, v213, (int)v215);
          LOBYTE(v253) = 15;
          if ( pToBagItem.p )
          {
            if ( !InterlockedDecrement(&pToBagItem.p->_m_nRef) )
            {
              InterlockedIncrement(&pToBagItem.p->_m_nRef);
              if ( pToBagItem.p )
                ((void (__stdcall *)(signed int))pToBagItem.p->vfptr->__vecDelDtor)(1);
            }
            pToBagItem.p = 0;
          }
          LOBYTE(v253) = 3;
          if ( pFromBagItem.p )
          {
            if ( !InterlockedDecrement(&pFromBagItem.p->_m_nRef) )
            {
              InterlockedIncrement(&pFromBagItem.p->_m_nRef);
              if ( pFromBagItem.p )
                ((void (__stdcall *)(signed int))pFromBagItem.p->vfptr->__vecDelDtor)(1);
            }
            pFromBagItem.p = 0;
          }
          goto LABEL_341;
        case 9:
          GW_ItemSlotBase::Decode(&v226, iPacket);
          LOBYTE(v253) = 17;
          if ( !v226.p )
          {
            LOBYTE(v253) = 3;
            goto LABEL_341;
          }
          nBagMaxSlot = TSecType<long>::GetData(&v226.p->nItemID);
          if ( (unsigned int)(v19 - 2) > 2
            || nCurItemID < 101
            || (v19 == 2 || v19 == 3 ? (v132 = 212) : v19 == 4 ? (v132 = 712) : (v132 = 100), nCurItemID > v132) )
          {
            LOBYTE(v253) = 3;
            if ( !v226.p )
              goto LABEL_341;
            if ( !InterlockedDecrement(&v226.p->_m_nRef) )
            {
              InterlockedIncrement(&v226.p->_m_nRef);
              if ( v226.p )
                ((void (__stdcall *)(signed int))v226.p->vfptr->__vecDelDtor)(1);
            }
LABEL_319:
            v226.p = 0;
            goto LABEL_341;
          }
          v133 = nCurItemID / 100 - 1;
          if ( v133 >= 0 && (v19 == 2 || v19 == 3 ? (v134 = 2) : v19 == 4 ? (v134 = 7) : (v134 = 0), v133 < v134) )
          {
            v135 = &aChangeBagInfo[v19 - 2].a[v133];
            v215 = (void (__thiscall *)(void *))v226.p[1]._m_nRef;
            *v135 += _ZtlSecureFuse<unsigned short>((const unsigned __int16 *)&v226.p[1], (unsigned int)v215);
            pos = 0;
            nNumber = TSecType<long>::GetData(&v226.p->nItemID);
            ZMap<long,long,long>::GetAt(&mOldItemCountInfo, &nNumber, (int *)&pos);
            v136 = TSecType<long>::GetData(&v226.p->nItemID);
            v137 = cd;
            v138 = CItemInfo::GetItemCountInBag((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, cd, v136, 1, 1);
            v215 = (void (__thiscall *)(void *))v19;
            v139 = &pos[v138];
            v214 = (ZXString<char> *)v226.p;
            nNumber = (int)&v213;
            if ( v226.p )
              InterlockedIncrement(&v226.p->_m_nRef);
            CharacterData::SetItemInBag(v137, nCurItemID, v213, (int)v215);
            v140 = nBagMaxSlot;
            v215 = (void (__thiscall *)(void *))v139;
            v141 = v217;
            CWvsContext::CheckQuestCompleteByItem(v217, nBagMaxSlot, (int)v215);
            CWvsContext::CheckInventoryOnAutoStartQuest(v141, v140, 1);
            LOBYTE(v253) = 3;
            if ( v226.p )
            {
              if ( InterlockedDecrement(&v226.p->_m_nRef) )
                goto LABEL_319;
              InterlockedIncrement(&v226.p->_m_nRef);
              if ( !v226.p )
                goto LABEL_319;
              ((void (__stdcall *)(signed int))v226.p->vfptr->__vecDelDtor)(1);
              v226.p = 0;
            }
          }
          else
          {
            LOBYTE(v253) = 3;
            if ( v226.p )
            {
              if ( !InterlockedDecrement(&v226.p->_m_nRef) )
              {
                InterlockedIncrement(&v226.p->_m_nRef);
                if ( v226.p )
                  ((void (__stdcall *)(signed int))v226.p->vfptr->__vecDelDtor)(1);
              }
              v226.p = 0;
            }
          }
          goto LABEL_341;
        case 10:
          v142 = nCurItemID;
          nNumber = (int)&v214;
          CharacterData::SetBag(cd, v19, nCurItemID, (ZRef<BagData>)(unsigned int)v214);
          if ( CWvsContext::IsBagUIOpend(v217, v19, v142) )
          {
            v143 = bag_idx_2_ui_type(v19, v142);
            CWvsContext::UI_Close(v217, v143);
          }
          goto LABEL_341;
        default:
          goto LABEL_341;
      }
    }
  }
LABEL_352:
  v149 = v217;
  CWvsContext::ValidateStat(v217, 1, 0);
  if ( bSetEffect && TSingleton<CUserLocal>::ms_pInstance._m_pStr )
  {
    CUser::SetSetItemEffect((CUser *)TSingleton<CUserLocal>::ms_pInstance._m_pStr);
    CUser::SetGroupEffectData((CUser *)TSingleton<CUserLocal>::ms_pInstance._m_pStr);
  }
  if ( TSingleton<CUIUserInfo>::ms_pInstance )
  {
    CUIUserInfo::ResetInfo(TSingleton<CUIUserInfo>::ms_pInstance);
    if ( v17 > 0 )
      CUIUserInfo::ResetInfo_Pet(TSingleton<CUIUserInfo>::ms_pInstance);
  }
  if ( TSingleton<CUIMedalQuestInfo>::ms_pInstance )
    CUIMedalQuestInfo::ResetWearedMedal(TSingleton<CUIMedalQuestInfo>::ms_pInstance);
  if ( TSingleton<CUICrossHunter>::ms_pInstance )
    CUICrossHunter::ResetInfo(TSingleton<CUICrossHunter>::ms_pInstance);
  if ( TSingleton<CUIBoardGame>::ms_pInstance )
    CUIBoardGame::SetUIResetFlag(TSingleton<CUIBoardGame>::ms_pInstance);
  if ( TSingleton<CUIYutGame>::ms_pInstance )
    CUIYutGame::SetUIResetFlag(TSingleton<CUIYutGame>::ms_pInstance);
  if ( TSingleton<CUIMesoRanger>::ms_pInstance._m_pStr )
    CUIMesoRanger::ResetInfo((CUIMesoRanger *)TSingleton<CUIMesoRanger>::ms_pInstance._m_pStr);
  if ( TSingleton<CUIDimensionLibrary>::ms_pInstance )
    CUIDimensionLibrary::ResetInfo(TSingleton<CUIDimensionLibrary>::ms_pInstance);
  if ( nPos )
  {
    v215 = (void (__thiscall *)(void *))ZArray<long>::~ZArray<long>;
    v214 = (ZXString<char> *)3;
    *(_DWORD *)v213.gap0 = 4;
    v212 = aChangeBagInfo;
    v149->m_nLastestGetItemID = 0;
    v149->m_nLastestGetItemPos = 0;
    LOBYTE(v253) = 2;
    `eh vector destructor iterator'(v212, *(unsigned int *)v213.gap0, (int)v214, v215);
    LOBYTE(v253) = 1;
    mInputItemInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
    ZMap<long,long,long>::RemoveAll(&mInputItemInfo);
    LOBYTE(v253) = 0;
    mOldItemCountInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
    ZMap<long,long,long>::RemoveAll(&mOldItemCountInfo);
    v150 = aCheckQuestEquipID.a;
    v151 = aCheckQuestEquipID.a == 0;
    goto LABEL_497;
  }
  if ( TSingleton<CUserLocal>::ms_pInstance._m_pStr )
  {
    v152 = (CUser *)TSingleton<CUserLocal>::ms_pInstance._m_pStr;
    v153 = v149->m_pCharacterData.p;
    if ( v153 )
    {
      v215 = (void (__thiscall *)(void *))v153->characterStat._ZtlSecureTear_nJob_CS;
      v154 = _ZtlSecureFuse<short>(v153->characterStat._ZtlSecureTear_nJob, (unsigned int)v215);
    }
    else
    {
      v154 = -1;
    }
    if ( v154 / 100 != 61 && v154 != 6000 )
    {
      v155 = v149->m_pCharacterData.p;
      if ( v155 )
      {
        v215 = (void (__thiscall *)(void *))v155->characterStat._ZtlSecureTear_nJob_CS;
        v156 = _ZtlSecureFuse<short>(v155->characterStat._ZtlSecureTear_nJob, (unsigned int)v215);
      }
      else
      {
        v156 = -1;
      }
      if ( v156 / 100 == 31 || v156 == 3001 || v156 / 100 == 65 || v156 == 6001 )
        CUser::ShowDefaultWing(v152, v152->m_nDefalutWingItemID);
    }
    else
    {
      CUser::ShowKaiserTransformWing(v152, v152->m_nKaiserWingItemID);
      CUser::ShowKaiserTransformTail(v152, v152->m_nKaiserTailItemID);
    }
  }
  v157 = mInputItemInfo._m_apTable;
  if ( mInputItemInfo._m_apTable
    && (v158 = &mInputItemInfo._m_apTable[mInputItemInfo._m_uTableSize], mInputItemInfo._m_apTable < v158) )
  {
    while ( !*v157 )
    {
      ++v157;
      if ( v157 >= v158 )
        goto LABEL_391;
    }
    v159 = (__POSITION *)*v157;
  }
  else
  {
LABEL_391:
    v159 = 0;
  }
  v160 = v159;
  pos = v159;
  while ( v160 )
  {
    v161 = *(_DWORD *)&v160[8];
    nBagMaxSlot = *(_DWORD *)&v160[12];
    v162 = nBagMaxSlot;
    nCurItemID = v161;
    v163 = CWvsContext::GetItemCount(v217, v161, 1);
    nCurCount = v163;
    if ( v162 && v161 )
    {
      nBeforeCount = 0;
      if ( !ZMap<long,long,long>::GetAt(&mOldItemCountInfo, &nCurItemID, &nBeforeCount) )
        nBeforeCount = 0;
      if ( nBeforeCount < v163 )
      {
        v164 = v217;
        v165 = nBagMaxSlot;
        v215 = 0;
        v214 = (ZXString<char> *)nCurItemID;
        v166 = v217;
        v217->m_nLastestGetItemID = nCurItemID;
        v166->m_nLastestGetItemPos = v165;
        CWvsContext::CheckPieceItem(v166, (int)v214, (int)v215);
        v215 = (void (__thiscall *)(void *))v164->m_nLastestGetItemID;
        if ( CItemInfo::GetEquipItem((CItemInfo *)TSingleton<CItemInfo>::ms_pInstance.m_Data, (int)v215) )
        {
          v215 = (void (__thiscall *)(void *))v164->m_nLastestGetItemPos;
          v167 = (GW_ItemSlotEquip *)CharacterData::GetItem(cd, &v232, 1, (int)v215)->p;
          pEquip.p = v167;
          if ( v167 )
            InterlockedIncrement(&v167->_m_nRef);
          v168 = InterlockedDecrement;
          LOBYTE(v253) = 18;
          if ( v232.p )
          {
            if ( !InterlockedDecrement(&v232.p->_m_nRef) )
            {
              InterlockedIncrement(&v232.p->_m_nRef);
              if ( v232.p )
                ((void (__stdcall *)(signed int))v232.p->vfptr->__vecDelDtor)(1);
            }
            v232.p = 0;
          }
          if ( v167 )
          {
            v169 = 0;
            nTI = 0;
            v170 = v167->vfptr[46].__vecDelDtor;
            LOBYTE(v253) = 19;
            switch ( ((unsigned __int8 (__thiscall *)(GW_ItemSlotEquip *))v170)(v167) )
            {
              case 1u:
                v215 = (void (__thiscall *)(void *))986;
                v214 = (ZXString<char> *)&bNotRemoveAddInfo;
                v171 = StringPool::GetInstance();
                v172 = StringPool::GetString(v171, v214, (unsigned int)v215);
                LOBYTE(v253) = 20;
                ZXString<char>::operator=((ZXString<char> *)&nTI, v172);
                v173 = (char *)bNotRemoveAddInfo;
                goto LABEL_413;
              case 2u:
                v215 = (void (__thiscall *)(void *))987;
                v214 = (ZXString<char> *)&nNumber;
                v174 = StringPool::GetInstance();
                v175 = StringPool::GetString(v174, v214, (unsigned int)v215);
                LOBYTE(v253) = 21;
                ZXString<char>::operator=((ZXString<char> *)&nTI, v175);
                v173 = (char *)nNumber;
                goto LABEL_413;
              case 3u:
                v215 = (void (__thiscall *)(void *))11174;
                v214 = &v239;
                v176 = StringPool::GetInstance();
                v177 = StringPool::GetString(v176, v214, (unsigned int)v215);
                LOBYTE(v253) = 22;
                ZXString<char>::operator=((ZXString<char> *)&nTI, v177);
                v173 = v239._m_pStr;
                goto LABEL_413;
              case 4u:
                v215 = (void (__thiscall *)(void *))988;
                v214 = &v236;
                v178 = StringPool::GetInstance();
                v179 = StringPool::GetString(v178, v214, (unsigned int)v215);
                LOBYTE(v253) = 23;
                ZXString<char>::operator=((ZXString<char> *)&nTI, v179);
                v173 = v236._m_pStr;
LABEL_413:
                LOBYTE(v253) = 19;
                if ( v173 )
                {
                  v180 = v173 - 12;
                  if ( InterlockedDecrement((volatile LONG *)v173 - 3) <= 0 )
                    ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v180);
                }
                v169 = nTI;
                if ( nTI && *(_BYTE *)nTI )
                {
                  v215 = (void (__thiscall *)(void *))7065;
                  v214 = &v240;
                  v181 = StringPool::GetInstance();
                  v182 = StringPool::GetString(v181, v214, (unsigned int)v215);
                  nPos = 0;
                  v183 = v182->_m_pStr;
                  v215 = 0;
                  v213 = (ZRef<GW_ItemSlotBase>)-1i64;
                  v212 = (ZArray<long> *)11;
                  v211 = v169;
                  LOBYTE(v253) = 25;
                  v184 = ZXString<char>::Format((ZXString<char> *)&nPos, v183, v169);
                  CHATLOG_ADD(v184, (unsigned __int16)v212, *(_QWORD *)&v213, (int)v215);
                  LOBYTE(v253) = 24;
                  if ( nPos )
                  {
                    v185 = (void *)(nPos - 12);
                    if ( InterlockedDecrement((volatile LONG *)(nPos - 12)) <= 0 )
                      ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v185);
                    v168 = InterlockedDecrement;
                  }
                  LOBYTE(v253) = 19;
                  if ( v240._m_pStr )
                  {
                    v186 = v240._m_pStr - 12;
                    if ( InterlockedDecrement((volatile LONG *)v240._m_pStr - 3) <= 0 )
                      ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v186);
                    v168 = InterlockedDecrement;
                  }
                }
                break;
              default:
                break;
            }
            LOBYTE(v253) = 18;
            if ( v169 )
            {
              v187 = (void *)(v169 - 12);
              if ( v168((volatile LONG *)v187) <= 0 )
                ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v187);
            }
          }
          LOBYTE(v253) = 3;
          if ( v167 )
          {
            if ( !v168(&v167->_m_nRef) )
            {
              InterlockedIncrement(&v167->_m_nRef);
              v167->vfptr->__vecDelDtor((ZRefCounted *)&v167->vfptr, 1u);
            }
            pEquip.p = 0;
          }
        }
      }
      v188 = nBeforeCount;
      if ( nBeforeCount > nCurCount )
      {
        v189 = v217;
        if ( nCurItemID == v217->m_nLastestGetItemID && nBagMaxSlot == v217->m_nLastestGetItemPos )
        {
          v217->m_nLastestGetItemID = 0;
          v189->m_nLastestGetItemPos = 0;
        }
      }
      if ( v188 )
      {
        if ( nCurItemID == v217->m_nLastestGetItemID )
        {
          v190 = v217;
          v191 = v217->m_nLastestGetItemPos;
          if ( nBeforePos == v191 && nBagMaxSlot != v191 )
          {
            if ( nBagMaxSlot >= 0 )
            {
              v217->m_nLastestGetItemPos = nBagMaxSlot;
              v192 = TSingleton<CUIItem>::ms_pInstance;
              if ( TSingleton<CUIItem>::ms_pInstance )
              {
                TSingleton<CUIItem>::ms_pInstance->m_nLastestGetItemID = 0;
                v192->m_nLastestGetItemPos = 0;
              }
            }
            else
            {
              v217->m_nLastestGetItemID = 0;
              v190->m_nLastestGetItemPos = 0;
            }
          }
        }
      }
    }
    if ( *(_DWORD *)&pos[4] )
    {
      v160 = *(__POSITION **)&pos[4];
      pos = *(__POSITION **)&pos[4];
    }
    else
    {
      v193 = (__POSITION **)&mInputItemInfo._m_apTable[__ROR4__(*(_DWORD *)&pos[8], 5) % mInputItemInfo._m_uTableSize
                                                     + 1];
      v194 = &mInputItemInfo._m_apTable[mInputItemInfo._m_uTableSize];
      if ( v193 >= (__POSITION **)v194 )
        break;
      while ( !*v193 )
      {
        ++v193;
        if ( v193 >= (__POSITION **)v194 )
          goto LABEL_453;
      }
      v160 = *v193;
      pos = *v193;
    }
  }
LABEL_453:
  v195 = 2;
  nTI = 2;
  do
  {
    if ( v195 == 2 || v195 == 3 )
    {
      v196 = 2;
    }
    else if ( v195 == 4 )
    {
      v196 = 7;
    }
    else
    {
      v196 = 0;
    }
    v197 = 0;
    for ( nBagMaxSlot = v196; v197 < nBagMaxSlot; ++v197 )
    {
      if ( !*(_DWORD *)(*(_DWORD *)&pSwap.gap0[4 * v195] + 4 * v197) )
        continue;
      CharacterData::GetBag(cd, &pBag, v195, v197);
      LOBYTE(v253) = 26;
      if ( !pBag.p )
      {
        LOBYTE(v253) = 3;
        continue;
      }
      v198 = pBag.p->nBagItemID;
      v199 = pBag.p->nBagItemID / 10000;
      if ( v199 != 265 && v199 != 308 && v199 != 433 )
      {
        v200 = &pBag.p[-1].aItemsInBag[10];
        v201 = (volatile LONG *)&pBag.p[-1].aItemsInBag[10].p;
        v215 = (void (__thiscall *)(void *))&pBag.p[-1].aItemsInBag[10].p;
        LOBYTE(v253) = 3;
        if ( !InterlockedDecrement((volatile LONG *)v215) )
        {
          InterlockedIncrement(v201);
          if ( v200 )
            (**(void (__thiscall ***)(char *, signed int))v200->gap0)(v200->gap0, 1);
        }
LABEL_482:
        v195 = nTI;
        pBag.p = 0;
        continue;
      }
      nPos = 0;
      if ( CharacterData::IsHaveBag(cd, v197, v195, &nPos) )
      {
        v202 = nPos;
        if ( nPos )
        {
          v203 = *(_DWORD *)&pSwap.gap0[4 * v195];
          v204 = *(_DWORD *)(v203 + 4 * v197) == 0;
          v205 = *(_DWORD *)(v203 + 4 * v197) < 0;
          v206 = (_DWORD *)(v203 + 4 * v197);
          if ( v205 )
          {
            v207 = v217;
            if ( v217->m_nLastestGetItemID != v198 || v217->m_nLastestGetItemPos != nPos )
              goto LABEL_478;
            v217->m_nLastestGetItemID = 0;
            v207->m_nLastestGetItemPos = 0;
            v204 = *v206 == 0;
            v205 = *v206 < 0;
          }
          if ( !v205 && !v204 )
          {
            v208 = v217;
            v215 = 0;
            v217->m_nLastestGetItemPos = v202;
            v214 = (ZXString<char> *)v198;
            v208->m_nLastestGetItemID = v198;
            CWvsContext::CheckPieceItem(v208, (int)v214, (int)v215);
          }
        }
      }
LABEL_478:
      LOBYTE(v253) = 3;
      if ( pBag.p )
      {
        v209 = &pBag.p[-1].aItemsInBag[10];
        v215 = (void (__thiscall *)(void *))&pBag.p[-1].aItemsInBag[10].p;
        if ( !InterlockedDecrement((volatile LONG *)v215) )
        {
          InterlockedIncrement((volatile LONG *)&v209->p);
          if ( v209 )
            (**(void (__thiscall ***)(char *, signed int))v209->gap0)(v209->gap0, 1);
        }
        goto LABEL_482;
      }
    }
    nTI = ++v195;
  }
  while ( v195 <= 4 );
  if ( TSingleton<CUIBitsInventory>::ms_pInstance )
    CUIBitsInventory::ResetCase(v217->m_pUIBitsInven.p);
  if ( TSingleton<CUIEventMuseumKingS2>::ms_pInstance )
  {
    v210 = v217->m_pUIEventMuseumKingS2.p;
    if ( v210 )
      CUIEventMuseumKingS2::LoadQuestState(v210);
  }
  if ( TSingleton<CNpcPool>::ms_pInstance )
    CNpcPool::InvalidateComponentNpc(TSingleton<CNpcPool>::ms_pInstance, 0);
  if ( TSingleton<CUIMonsterBattleCollection>::ms_pInstance )
    CUIMonsterBattleCollection::UpdateUI(TSingleton<CUIMonsterBattleCollection>::ms_pInstance);
  if ( TSingleton<CUIStarForce>::ms_pInstance )
    CUIStarForce::OnChangeStarForce(TSingleton<CUIStarForce>::ms_pInstance);
  LOBYTE(v253) = 2;
  `eh vector destructor iterator'(aChangeBagInfo, 4u, 3, (void (__thiscall *)(void *))ZArray<long>::~ZArray<long>);
  LOBYTE(v253) = 1;
  mInputItemInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
  ZMap<long,long,long>::RemoveAll(&mInputItemInfo);
  LOBYTE(v253) = 0;
  mOldItemCountInfo.vfptr = (ZMap<long,long,long>Vtbl *)&ZMap<long,long,long>::`vftable';
  ZMap<long,long,long>::RemoveAll(&mOldItemCountInfo);
  v150 = aCheckQuestEquipID.a;
  v151 = aCheckQuestEquipID.a == 0;
LABEL_497:
  v253 = -1;
  if ( !v151 )
    ZAllocEx<ZAllocAnonSelector>::Free(&ZAllocEx<ZAllocAnonSelector>::_s_alloc, v150 - 1);
}
