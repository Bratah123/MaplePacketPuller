void __thiscall CLogin::OnCheckPasswordResult(CLogin *this, CInPacket *iPacket)
{
  CLogin *v2; // ebx
  unsigned __int8 v3; // al
  CNexonMessenger *v4; // ecx
  int v5; // edi
  unsigned __int8 v6; // al
  int v7; // edi
  _FILETIME v8; // rax
  _FILETIME v9; // rax
  int v10; // eax
  StringPool *v11; // eax
  StringPool *v12; // eax
  char *v13; // eax
  IUnknown *v14; // edi
  HRESULT v15; // eax
  HRESULT v16; // eax
  StringPool *v17; // eax
  Ztl_variant_t *v18; // eax
  _com_ptr_t<_com_IIID<IUnknown,&_GUID_00000000_0000_0000_c000_000000000046> > *v19; // eax
  IWzProperty *v20; // ebx
  void *v21; // esp
  const wchar_t *v22; // eax
  Ztl_variant_t *v23; // eax
  _com_ptr_t<_com_IIID<IUnknown,&_GUID_00000000_0000_0000_c000_000000000046> > *v24; // eax
  char *v25; // ecx
  IWzProperty *v26; // edi
  StringPool *v27; // eax
  Ztl_variant_t *v28; // eax
  bool v29; // zf
  const wchar_t *v30; // eax
  ZXString<char> *v31; // eax
  ZXString<char> *v32; // eax
  char *v33; // ecx
  ZXString<char> *v34; // eax
  char *v35; // ecx
  ZXString<char> *v36; // eax
  char *v37; // ecx
  char *v38; // esi
  unsigned int (__stdcall *v39)(IUnknown *); // eax
  char *v40; // esi
  char *v41; // edi
  StringPool *v42; // eax
  char *v43; // eax
  void *v44; // esi
  StringPool *v45; // eax
  char *v46; // eax
  int v47; // edi
  StringPool *v48; // eax
  char *v49; // eax
  StringPool *v50; // eax
  char *v51; // eax
  StringPool *v52; // eax
  StringPool *v53; // eax
  char *v54; // eax
  StringPool *v55; // eax
  ZXString<char> *v56; // ecx
  StringPool *v57; // eax
  char *v58; // eax
  unsigned int v59; // eax
  int v60; // edi
  int v61; // ebx
  Ztl_variant_t *v62; // ecx
  _bstr_t::Data_t *v63; // edi
  ZXString<char> *v64; // eax
  char *v65; // edi
  void *v66; // ebx
  unsigned __int8 v67; // al
  bool *v68; // edi
  signed int v69; // ebx
  int v70; // eax
  bool v71; // dl
  unsigned int v72; // eax
  CUILoginStart *v73; // edi
  ZXString<char> v74; // [esp-44h] [ebp-110h]
  const wchar_t *v75; // [esp-40h] [ebp-10Ch]
  ZRef<CDialog> *v76; // [esp-3Ch] [ebp-108h]
  int v77; // [esp-38h] [ebp-104h]
  int v78; // [esp-34h] [ebp-100h]
  int v79; // [esp-30h] [ebp-FCh]
  char *v80; // [esp-2Ch] [ebp-F8h]
  Ztl_bstr_t v81; // [esp-28h] [ebp-F4h]
  int v82; // [esp-24h] [ebp-F0h]
  ZXString<char> v83; // [esp-1Ch] [ebp-E8h]
  const wchar_t *v84; // [esp-18h] [ebp-E4h]
  ZRef<CDialog> *v85; // [esp-14h] [ebp-E0h]
  int v86; // [esp-10h] [ebp-DCh]
  VARIANTARG *v87; // [esp-Ch] [ebp-D8h]
  Ztl_variant_t *v88; // [esp-8h] [ebp-D4h]
  Ztl_variant_t *v89; // [esp-4h] [ebp-D0h]
  _FILETIME dtChatUnblockDate; // [esp+10h] [ebp-BCh]
  Ztl_variant_t result; // [esp+18h] [ebp-B4h]
  _SYSTEMTIME st; // [esp+28h] [ebp-A4h]
  unsigned __int16 v93; // [esp+38h] [ebp-94h]
  unsigned __int16 v94; // [esp+3Ah] [ebp-92h]
  unsigned __int16 v95; // [esp+3Eh] [ebp-8Eh]
  unsigned __int16 v96; // [esp+40h] [ebp-8Ch]
  _FILETIME dtUnblockDate; // [esp+48h] [ebp-84h]
  _FILETIME ft; // [esp+50h] [ebp-7Ch]
  COutPacket oPacket; // [esp+58h] [ebp-74h]
  VARIANTARG pvarg; // [esp+6Ch] [ebp-60h]
  VARIANTARG pvargDest; // [esp+7Ch] [ebp-50h]
  ZXString<char> sID; // [esp+8Ch] [ebp-40h]
  int nVIPGrade; // [esp+90h] [ebp-3Ch]
  _FILETIME p; // [esp+98h] [ebp-34h]
  _com_ptr_t<_com_IIID<IWzProperty,&_GUID_986515d9_0a0b_4929_8b4f_718682177b92> > pBlockReasonIter; // [esp+A0h] [ebp-2Ch]
  _com_ptr_t<_com_IIID<IWzProperty,&_GUID_986515d9_0a0b_4929_8b4f_718682177b92> > pBlockReason; // [esp+A4h] [ebp-28h]
  int nBlockReason; // [esp+A8h] [ebp-24h]
  _com_ptr_t<_com_IIID<IUnknown,&_GUID_00000000_0000_0000_c000_000000000046> > nPurchaseExp; // [esp+ACh] [ebp-20h]
  int nGender; // [esp+B0h] [ebp-1Ch]
  unsigned int dwAccountID; // [esp+B4h] [ebp-18h]
  ZXString<char> sMsg2; // [esp+B8h] [ebp-14h]
  ZXString<char> sMsg; // [esp+BCh] [ebp-10h]
  int v113; // [esp+C8h] [ebp-4h]
  char sURL[1024]; // [esp+CCh] [ebp+0h]

  v2 = this;
  sMsg._m_pStr = (char *)this;
  this->m_bRequestSent = 0;
  v3 = CInPacket::Decode1(iPacket);
  v4 = (CNexonMessenger *)TSingleton<CUITitle>::ms_pInstance;
  v5 = v3;
  nGender = v3;
  if ( TSingleton<CUITitle>::ms_pInstance )
    CUITitle::EnableLoginCtrl(TSingleton<CUITitle>::ms_pInstance, 1);
  if ( v5 )
    *((_DWORD *)TSingleton<CWvsApp>::ms_pInstance._m_pStr + 40) = 5;
  switch ( v5 )
  {
    case 2:
      v6 = CInPacket::Decode1(iPacket);
      v7 = v6;
      nBlockReason = v6;
      CInPacket::DecodeBuffer(iPacket, &dtUnblockDate, 8u);
      if ( v7 )
      {
        ZAPI.FileTimeToSystemTime(&dtUnblockDate, (_SYSTEMTIME *)&v93);
        v8 = Util::FTGetNow();
        p.dwLowDateTime = v8.dwLowDateTime;
        p.dwHighDateTime = v8.dwHighDateTime;
        v9 = Util::FTAddDay(&p, 1080);
        ft.dwHighDateTime = v9.dwHighDateTime;
        ft.dwLowDateTime = v9.dwLowDateTime;
        v10 = ZAPI.CompareFileTime(&ft, &dtUnblockDate);
        sMsg2._m_pStr = 0;
        v113 = 0;
        if ( v10 == -1 )
        {
          v11 = StringPool::GetInstance();
          v89 = (Ztl_variant_t *)StringPool::GetString(v11, (ZXString<char> *)&nPurchaseExp, 0x11CEu)->_m_pStr;
          LOBYTE(v113) = 1;
          ZXString<char>::Format(&sMsg2, (const char *)v89);
        }
        else
        {
          v12 = StringPool::GetInstance();
          v13 = StringPool::GetString(v12, (ZXString<char> *)&nPurchaseExp, 0x118Du)->_m_pStr;
          LOBYTE(v113) = 2;
          ZXString<char>::Format(&sMsg2, v13, v93, v94, v95, v96);
        }
        LOBYTE(v113) = 0;
        if ( nPurchaseExp.m_pInterface )
        {
          v14 = nPurchaseExp.m_pInterface - 3;
          if ( InterlockedDecrement((volatile LONG *)&nPurchaseExp.m_pInterface[-3]) <= 0 )
            ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v14);
        }
        VariantInit(&pvarg);
        v15 = ZComAPI::ZComVariantCopy(&pvarg, (tagVARIANT *)&vtMissing.0);
        if ( v15 < 0 )
          _com_issue_error(v15);
        LOBYTE(v113) = 3;
        VariantInit(&pvargDest);
        v16 = ZComAPI::ZComVariantCopy(&pvargDest, (tagVARIANT *)&vtMissing.0);
        if ( v16 < 0 )
          _com_issue_error(v16);
        v89 = (Ztl_variant_t *)&pvarg;
        v88 = (Ztl_variant_t *)&pvargDest;
        v87 = &pvarg;
        dwAccountID = (unsigned int)&v87;
        LOBYTE(v113) = 4;
        v17 = StringPool::GetInstance();
        StringPool::GetBSTR(v17, (Ztl_bstr_t *)&v87, 0x118Cu);
        LOBYTE(v113) = 5;
        if ( !g_rm.m_pInterface )
          _com_issue_error(-2147467261);
        LOBYTE(v113) = 4;
        v18 = IWzResMan::GetObjectA(g_rm.m_pInterface, &result, (Ztl_bstr_t)v87, v88, v89);
        LOBYTE(v113) = 6;
        v19 = get_unknown(&nPurchaseExp, v18);
        LOBYTE(v113) = 7;
        _com_ptr_t<_com_IIID<IWzProperty,&__s_GUID const _GUID_986515d9_0a0b_4929_8b4f_718682177b92>>::_com_ptr_t<_com_IIID<IWzProperty,&__s_GUID const _GUID_986515d9_0a0b_4929_8b4f_718682177b92>>(
          &pBlockReason,
          v19);
        LOBYTE(v113) = 9;
        if ( nPurchaseExp.m_pInterface )
          ((void (__cdecl *)(IUnknown *))nPurchaseExp.m_pInterface->vfptr->Release)(nPurchaseExp.m_pInterface);
        LOBYTE(v113) = 10;
        if ( result.vt == 8 )
        {
          result.vt = 0;
          if ( result.decVal.Lo32 )
            ZAPI.CoTaskMemFree((void *)(result.decVal.Lo32 - 4));
        }
        else
        {
          VariantClear((VARIANTARG *)&result.0);
        }
        LOBYTE(v113) = 11;
        if ( pvargDest.vt == 8 )
        {
          pvargDest.vt = 0;
          if ( pvargDest.decVal.Lo32 )
            ZAPI.CoTaskMemFree((void *)(pvargDest.decVal.Lo32 - 4));
        }
        else
        {
          VariantClear(&pvargDest);
        }
        LOBYTE(v113) = 12;
        if ( pvarg.vt == 8 )
        {
          pvarg.vt = 0;
          if ( pvarg.decVal.Lo32 )
            ZAPI.CoTaskMemFree((void *)(pvarg.decVal.Lo32 - 4));
        }
        else
        {
          VariantClear(&pvarg);
        }
        v20 = pBlockReason.m_pInterface;
        if ( pBlockReason.m_pInterface )
        {
          v21 = alloca(32);
          v22 = _itow(nBlockReason, (unsigned __int16 *)&v82, 10);
          dwAccountID = (unsigned int)&v81;
          _bstr_t::_bstr_t((_bstr_t *)&v81.m_Data, v22);
          LOBYTE(v113) = 12;
          v23 = IWzProperty::Getitem(v20, (Ztl_variant_t *)&oPacket.m_aSendBuff, v81);
          LOBYTE(v113) = 14;
          v24 = get_unknown(
                  (_com_ptr_t<_com_IIID<IUnknown,&_GUID_00000000_0000_0000_c000_000000000046> > *)&nGender,
                  v23);
          LOBYTE(v113) = 15;
          _com_ptr_t<_com_IIID<IWzProperty,&__s_GUID const _GUID_986515d9_0a0b_4929_8b4f_718682177b92>>::_com_ptr_t<_com_IIID<IWzProperty,&__s_GUID const _GUID_986515d9_0a0b_4929_8b4f_718682177b92>>(
            &pBlockReasonIter,
            v24);
          LOBYTE(v113) = 17;
          if ( nGender )
            (*(void (__cdecl **)(int))(*(_DWORD *)nGender + 8))(nGender);
          LOBYTE(v113) = 18;
          if ( LOWORD(oPacket.m_aSendBuff.a) == 8 )
          {
            LOWORD(oPacket.m_aSendBuff.a) = 0;
            if ( oPacket.m_bTypeHeader1Byte )
              ZAPI.CoTaskMemFree((void *)(oPacket.m_bTypeHeader1Byte - 4));
          }
          else
          {
            VariantClear((VARIANTARG *)&oPacket.m_aSendBuff);
          }
          sMsg._m_pStr = 0;
          v26 = pBlockReasonIter.m_pInterface;
          LOBYTE(v113) = 19;
          if ( pBlockReasonIter.m_pInterface )
          {
            v80 = v25;
            dwAccountID = (unsigned int)&v80;
            v27 = StringPool::GetInstance();
            StringPool::GetBSTR(v27, (Ztl_bstr_t *)&v80, 0xA5Du);
            LOBYTE(v113) = 19;
            v28 = IWzProperty::Getitem(v26, (Ztl_variant_t *)&nVIPGrade, (Ztl_bstr_t)v80);
            v29 = v28->vt == 8;
            LOBYTE(v113) = 21;
            v30 = (const wchar_t *)(v29 ? v28->decVal.Lo32 : &sDefault);
            ZXString<char>::Assign<unsigned short>(&sMsg, v30, -1);
            LOBYTE(v113) = 19;
            Ztl_variant_t::~Ztl_variant_t((Ztl_variant_t *)&nVIPGrade);
            if ( sMsg._m_pStr )
            {
              if ( *sMsg._m_pStr )
              {
                v31 = ZXString<char>::ReplaceAll(&sMsg, (ZXString<char> *)&p.dwHighDateTime, "\\r", "\r");
                LOBYTE(v113) = 22;
                ZXString<char>::operator=(&sMsg, v31);
                LOBYTE(v113) = 19;
                ZXString<char>::~ZXString<char>((ZXString<char> *)&p.dwHighDateTime);
                v32 = ZXString<char>::ReplaceAll(&sMsg, (ZXString<char> *)&p.dwHighDateTime, "\\n", "\n");
                LOBYTE(v113) = 23;
                ZXString<char>::operator=(&sMsg, v32);
                LOBYTE(v113) = 19;
                ZXString<char>::~ZXString<char>((ZXString<char> *)&p.dwHighDateTime);
                if ( nBlockReason == 6 )
                {
                  v80 = sMsg2._m_pStr;
                  v34 = ZXString<char>::Format(&sMsg, sMsg._m_pStr, sMsg2._m_pStr);
                  ZXString<char>::operator=(&sMsg, v34);
                  v80 = 0;
                  v79 = 0;
                  v78 = 0;
                  v77 = 1;
                  v76 = 0;
                  v75 = 0;
                  v74._m_pStr = v35;
                  dwAccountID = (unsigned int)&v74;
                  ZXString<char>::ZXString<char>(&v74, &sMsg);
LABEL_52:
                  CUtilDlg::Notice(v74, v75, v76, v77, v78, v79, (int)v80);
                  goto LABEL_53;
                }
                if ( nBlockReason == 9 || nBlockReason == 22 )
                {
                  v80 = 0;
                  v79 = 0;
                  v78 = 0;
                  v77 = 1;
                  v76 = 0;
                  v75 = 0;
                  v74._m_pStr = v33;
                  dwAccountID = (unsigned int)&v74;
                  ZXString<char>::ZXString<char>(&v74, &sMsg);
                  goto LABEL_52;
                }
                v80 = 0;
                v79 = 0;
                v78 = 0;
                v77 = 1;
                v76 = 0;
                v75 = 0;
                v36 = ZXString<char>::operator+(&sMsg, (ZXString<char> *)&p.dwHighDateTime, "\r\n\r\n");
                v74._m_pStr = v37;
                dwAccountID = (unsigned int)&v74;
                LOBYTE(v113) = 24;
                ZXString<char>::operator+(v36, &v74, &sMsg2);
                CUtilDlg::Notice(v74, v75, v76, v77, v78, v79, (int)v80);
                LOBYTE(v113) = 19;
                ZXString<char>::~ZXString<char>((ZXString<char> *)&p.dwHighDateTime);
              }
            }
          }
LABEL_53:
          LOBYTE(v113) = 18;
          if ( sMsg._m_pStr )
          {
            v38 = sMsg._m_pStr - 12;
            if ( InterlockedDecrement((volatile LONG *)sMsg._m_pStr - 3) <= 0 )
              ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v38);
          }
          LOBYTE(v113) = 12;
          if ( v26 )
            ((void (__cdecl *)(IWzProperty *))v26->vfptr->Release)(v26);
          v39 = v20->vfptr->Release;
          LOBYTE(v113) = 0;
          ((void (__cdecl *)(IWzProperty *))v39)(v20);
          v113 = -1;
          if ( sMsg2._m_pStr )
          {
            v40 = sMsg2._m_pStr - 12;
            goto LABEL_140;
          }
          return;
        }
        v113 = -1;
        if ( sMsg2._m_pStr )
        {
          v41 = sMsg2._m_pStr - 12;
          if ( InterlockedDecrement((volatile LONG *)sMsg2._m_pStr - 3) <= 0 )
            ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v41);
        }
      }
      break;
    case 45:
      if ( CLoginUtilDlg::YesNo(97, 0) )
      {
        v42 = StringPool::GetInstance();
        v43 = StringPool::GetString(v42, (ZXString<char> *)&p.dwHighDateTime, 7u)->_m_pStr;
        v113 = 25;
        NMCOHelpers::GetLoginDirectUrl(v43, sURL, 0, 0, 0x12213u);
        v113 = -1;
        if ( p.dwHighDateTime )
        {
          v44 = (void *)(p.dwHighDateTime - 12);
          if ( InterlockedDecrement((volatile LONG *)(p.dwHighDateTime - 12)) <= 0 )
            ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v44);
        }
        open_web_site(sURL, 0, 6);
      }
      return;
    case 23:
      if ( CInPacket::Decode1(iPacket) || !CLogin::GiveNoticeToOldOTPUser(v2) )
      {
        CLogin::SendOneTimePassword(v2, 0);
      }
      else
      {
        COutPacket::COutPacket(&oPacket, 135);
        v113 = 26;
        if ( TSingleton<CClientSocket>::ms_pInstance._m_pStr )
          CClientSocket::SendPacket(&oPacket);
        v45 = StringPool::GetInstance();
        v46 = StringPool::GetString(v45, (ZXString<char> *)&p.dwHighDateTime, 0xFu)->_m_pStr;
        LOBYTE(v113) = 27;
        open_web_site(v46, 0, 6);
        LOBYTE(v113) = 26;
        ZXString<char>::~ZXString<char>((ZXString<char> *)&p.dwHighDateTime);
        v113 = -1;
        COutPacket::~COutPacket(&oPacket);
      }
      return;
    case 43:
      CLogin::DisplayAccountList(v2, iPacket);
      return;
    case 0:
      goto LABEL_81;
  }
  v4 = TSingleton<CNexonMessenger>::ms_pInstance;
  if ( TSingleton<CNexonMessenger>::ms_pInstance )
    CNexonMessenger::SSOLogoutAuth(TSingleton<CNexonMessenger>::ms_pInstance);
LABEL_81:
  v47 = nGender;
  switch ( nGender )
  {
    case 4294967295:
    case 6:
    case 8:
    case 9:
      v89 = 0;
      v88 = (Ztl_variant_t *)15;
      goto LABEL_119;
    case 2:
    case 3:
      v89 = 0;
      v88 = (Ztl_variant_t *)16;
      goto LABEL_119;
    case 4:
      v89 = 0;
      v88 = (Ztl_variant_t *)3;
      goto LABEL_119;
    case 5:
      v89 = 0;
      v88 = (Ztl_variant_t *)20;
      goto LABEL_119;
    case 7:
    case 78:
      CLogin::GotoBaseStep((CLogin *)sMsg._m_pStr, 0, 0);
      v89 = 0;
      v88 = (Ztl_variant_t *)17;
      goto LABEL_119;
    case 10:
      v89 = 0;
      v88 = (Ztl_variant_t *)19;
      goto LABEL_119;
    case 11:
      v89 = 0;
      v88 = (Ztl_variant_t *)14;
      goto LABEL_119;
    case 13:
      v89 = 0;
      v88 = (Ztl_variant_t *)21;
      goto LABEL_119;
    case 14:
      if ( CLoginUtilDlg::YesNo2(27) )
      {
        v89 = (Ztl_variant_t *)11060;
        v88 = (Ztl_variant_t *)&p.dwHighDateTime;
        v48 = StringPool::GetInstance();
        v49 = StringPool::GetString(v48, (ZXString<char> *)v88, (unsigned int)v89)->_m_pStr;
        v113 = 28;
        open_web_site(v49, 0, 6);
        v113 = -1;
        ZXString<char>::~ZXString<char>((ZXString<char> *)&p.dwHighDateTime);
      }
      break;
    case 15:
      if ( CLoginUtilDlg::YesNo2(26) )
      {
        v89 = (Ztl_variant_t *)11060;
        v88 = (Ztl_variant_t *)&pBlockReasonIter;
        v50 = StringPool::GetInstance();
        v51 = StringPool::GetString(v50, (ZXString<char> *)v88, (unsigned int)v89)->_m_pStr;
        v113 = 29;
        open_web_site(v51, 0, 6);
        v113 = -1;
        ZXString<char>::~ZXString<char>((ZXString<char> *)&pBlockReasonIter);
      }
      break;
    case 17:
      v89 = 0;
      v88 = (Ztl_variant_t *)33;
      goto LABEL_119;
    case 19:
      CLoginUtilDlg::Error(43, 0);
      *((_DWORD *)sMsg._m_pStr + 245) = 1;
      break;
    case 24:
      v89 = 0;
      v88 = (Ztl_variant_t *)48;
      goto LABEL_119;
    case 25:
      v89 = 0;
      v88 = (Ztl_variant_t *)49;
      goto LABEL_119;
    case 26:
      v89 = 0;
      v88 = (Ztl_variant_t *)50;
      goto LABEL_119;
    case 28:
      v89 = 0;
      v88 = (Ztl_variant_t *)52;
      goto LABEL_119;
    case 34:
      v89 = 0;
      v88 = (Ztl_variant_t *)63;
      goto LABEL_119;
    case 35:
    case 36:
      v89 = 0;
      v88 = (Ztl_variant_t *)64;
      goto LABEL_119;
    case 37:
      v89 = 0;
      v88 = (Ztl_variant_t *)66;
      goto LABEL_119;
    case 40:
      v89 = 0;
      v88 = (Ztl_variant_t *)72;
      goto LABEL_119;
    case 41:
      v89 = 0;
      v88 = (Ztl_variant_t *)78;
      goto LABEL_119;
    case 45:
      v89 = 0;
      v88 = (Ztl_variant_t *)96;
      goto LABEL_119;
    case 50:
      v89 = 0;
      v88 = (Ztl_variant_t *)89;
      goto LABEL_119;
    case 52:
      v89 = 0;
      v88 = (Ztl_variant_t *)91;
      goto LABEL_119;
    case 53:
      v89 = 0;
      v88 = (Ztl_variant_t *)95;
      goto LABEL_119;
    case 63:
      v89 = 0;
      v88 = 0;
      v87 = 0;
      v86 = 0;
      v85 = 0;
      v84 = 0;
      v83._m_pStr = (char *)v4;
      p.dwHighDateTime = (unsigned int)&v83;
      v52 = StringPool::GetInstance();
      StringPool::GetString(v52, &v83, 0x292Bu);
      CUtilDlg::Notice(v83, v84, v85, v86, (int)v87, (int)v88, (int)v89);
      v89 = (Ztl_variant_t *)10538;
      v88 = (Ztl_variant_t *)&pBlockReason;
      v53 = StringPool::GetInstance();
      v54 = StringPool::GetString(v53, (ZXString<char> *)v88, (unsigned int)v89)->_m_pStr;
      v113 = 30;
      open_web_site(v54, 0, 6);
      v113 = -1;
      ZXString<char>::~ZXString<char>((ZXString<char> *)&pBlockReason);
      break;
    case 64:
      v89 = 0;
      v88 = (Ztl_variant_t *)107;
      goto LABEL_119;
    case 68:
      CLoginUtilDlg::YesNoLarge2(1, 0);
      sMsg2._m_pStr = 0;
      v29 = LOBYTE(TSingleton<CWvsContext>::ms_pInstance.m_Data[713].m_str) == 0;
      v113 = 31;
      if ( v29 )
      {
        v89 = (Ztl_variant_t *)20;
        v88 = (Ztl_variant_t *)&nBlockReason;
        v57 = StringPool::GetInstance();
        v58 = StringPool::GetString(v57, (ZXString<char> *)v88, (unsigned int)v89)->_m_pStr;
        v89 = (Ztl_variant_t *)TSingleton<CWvsContext>::ms_pInstance.m_Data[713].m_wstr;
        LOBYTE(v113) = 33;
        ZXString<char>::Format(&sMsg2, v58, v89);
        v56 = (ZXString<char> *)&nBlockReason;
      }
      else
      {
        v89 = (Ztl_variant_t *)21;
        v88 = (Ztl_variant_t *)&nPurchaseExp;
        v55 = StringPool::GetInstance();
        v89 = (Ztl_variant_t *)StringPool::GetString(v55, (ZXString<char> *)v88, (unsigned int)v89)->_m_pStr;
        LOBYTE(v113) = 32;
        ZXString<char>::Format(&sMsg2, (const char *)v89);
        v56 = (ZXString<char> *)&nPurchaseExp;
      }
      LOBYTE(v113) = 31;
      ZXString<char>::~ZXString<char>(v56);
      open_web_site(sMsg2._m_pStr, 0, 6);
      v113 = -1;
      ZXString<char>::~ZXString<char>(&sMsg2);
      v47 = nGender;
      break;
    case 73:
      v89 = 0;
      v88 = (Ztl_variant_t *)118;
      goto LABEL_119;
    case 82:
      v89 = 0;
      v88 = (Ztl_variant_t *)119;
      goto LABEL_119;
    case 83:
      v89 = 0;
      v88 = (Ztl_variant_t *)120;
      goto LABEL_119;
    case 92:
      v89 = 0;
      v88 = (Ztl_variant_t *)122;
LABEL_119:
      CLoginUtilDlg::Error((int)v88, (ZRef<CDialog> *)v89);
      break;
    default:
      break;
  }
  if ( !v47 || v47 == 12 )
  {
    if ( TSingleton<CUITitle>::ms_pInstance )
      CUITitle::EnableLoginCtrl(TSingleton<CUITitle>::ms_pInstance, 0);
    CInPacket::DecodeStr(iPacket, &sID);
    v113 = 34;
    ZXString<char>::operator=((ZXString<char> *)&TSingleton<CWvsContext>::ms_pInstance.m_Data[1], &sID);
    dwAccountID = CInPacket::Decode4(iPacket);
    nGender = (unsigned __int8)CInPacket::Decode1(iPacket);
    LOBYTE(sMsg2._m_pStr) = CInPacket::Decode1(iPacket);
    v59 = CInPacket::Decode4(iPacket);
    v60 = (v59 >> 4) & 1;
    v61 = (v59 >> 5) & 1;
    pBlockReasonIter.m_pInterface = (IWzProperty *)((v59 >> 13) & 1);
    CInPacket::DecodeBuffer(iPacket, &p.dwHighDateTime, 4u);
    nBlockReason = CInPacket::Decode4(iPacket);
    LOBYTE(nPurchaseExp.m_pInterface) = CInPacket::Decode1(iPacket);
    LOBYTE(pBlockReason.m_pInterface) = CInPacket::Decode1(iPacket);
    CInPacket::DecodeBuffer(iPacket, &dtChatUnblockDate, 8u);
    ZAPI.FileTimeToSystemTime(&dtChatUnblockDate, &st);
    CWvsContext::SetAccountInfo(
      (CWvsContext *)TSingleton<CWvsContext>::ms_pInstance.m_Data,
      dwAccountID,
      nGender,
      (char)sMsg2._m_pStr,
      nBlockReason,
      (char)nPurchaseExp.m_pInterface,
      (char)pBlockReason.m_pInterface,
      st,
      v60,
      v61,
      (int)pBlockReasonIter.m_pInterface,
      p.dwHighDateTime);
    if ( !CInPacket::Decode1(iPacket) )
    {
      v89 = v62;
      dwAccountID = (unsigned int)&v89;
      CInPacket::DecodeStr(iPacket, (ZXString<char> *)&v89);
      CWvsContext::SetCensoredNxLoginID(
        (CWvsContext *)TSingleton<CWvsContext>::ms_pInstance.m_Data,
        (ZXString<char>)v89);
    }
    v63 = TSingleton<CWvsContext>::ms_pInstance.m_Data;
    LOBYTE(v63[722].m_wstr) = CInPacket::Decode1(iPacket);
    v64 = CInPacket::DecodeStr(iPacket, (ZXString<char> *)&dwAccountID);
    v65 = sMsg._m_pStr;
    LOBYTE(v113) = 35;
    ZXString<char>::operator=((ZXString<char> *)sMsg._m_pStr + 310, v64);
    LOBYTE(v113) = 34;
    if ( dwAccountID )
    {
      v66 = (void *)(dwAccountID - 12);
      if ( InterlockedDecrement((volatile LONG *)(dwAccountID - 12)) <= 0 )
        ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v66);
    }
    *((_DWORD *)v65 + 328) = nGender;
    if ( CInPacket::Decode1(iPacket) )
    {
      v67 = CInPacket::Decode1(iPacket);
      *((_DWORD *)v65 + 353) = v67;
      TSingleton<CWvsContext>::ms_pInstance.m_Data[2624].m_str = (char *)v67;
      v68 = (bool *)(v65 + 1416);
      v69 = 31516;
      nGender = 31516;
      nBlockReason = -1416 - (unsigned int)sMsg._m_pStr;
      do
      {
        *v68 = CInPacket::Decode1(iPacket) != 0;
        v70 = (unsigned __int16)CInPacket::Decode2(iPacket);
        *(_DWORD *)&sMsg._m_pStr[v69 - 30080] = (unsigned __int16)v70;
        v71 = *v68;
        p.dwHighDateTime = (unsigned int)TSingleton<CWvsContext>::ms_pInstance.m_Data;
        if ( (unsigned int)&v68[nBlockReason] <= 0x12 )
        {
          v68[nBlockReason + 31496 + (unsigned int)TSingleton<CWvsContext>::ms_pInstance.m_Data] = v71;
          v69 = nGender;
          *(_DWORD *)(nGender + p.dwHighDateTime) = v70;
        }
        ++v68;
        v69 += 4;
        nGender = v69;
      }
      while ( (signed int)&v68[nBlockReason] < 19 );
      v65 = sMsg._m_pStr;
    }
    *((_DWORD *)v65 + 343) = CInPacket::Decode1(iPacket) != 0;
    v72 = CInPacket::Decode4(iPacket);
    v29 = *((_DWORD *)v65 + 231) == 1;
    *((_DWORD *)v65 + 344) = v72;
    if ( v29 )
    {
      v73 = (CUILoginStart *)*((_DWORD *)v65 + 293);
      if ( v73 )
        CUILoginStart::SetViewWorldButtonMakeShining(v73);
    }
    v113 = -1;
    if ( sID._m_pStr )
    {
      v40 = sID._m_pStr - 12;
LABEL_140:
      if ( InterlockedDecrement((volatile LONG *)v40) <= 0 )
        ZAllocEx<ZAllocStrSelector<char>>::Free(&ZAllocEx<ZAllocStrSelector<char>>::_s_alloc, v40);
      return;
    }
  }
}